<script type="text/javascript"> </script>

Comments used to be used between the <script> tags to hide JavaScript code from old browsers
  that didn’t know how to process the <script> tag.

When ECMAScript 5 (ES5) appeared, It added new features to the language and 
modified some of the existing ones. To keep the old code working, most such 
modifications are off by default. You need to explicitly enable them with 
a special directive: "use strict".  This is placed at the top of a function or
file as so: "use strict";

Variables don't need to be declared first if not using strict

Javascript typically uses camelCase naming

Chromium based browsers use the V8 Javascript Engine
Firefox uses Spidermonkey

Infinity (or -Infinity) is the value JavaScript 
will return if you calculate a number outside the largest possible number.

Division by 0 (zero) also generates Infinity

EcmaScript Specification Links:
https://tc39.es/ecma262/

MDN Web Reference Links:
https://developer.mozilla.org/en-US/docs/Web

MDN Bitwise Operators:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#bitwise_operators

Check compatibility of features
https://caniuse.com/

Regex Tutorials:
https://www.youtube.com/playlist?list=PL4cUxeGkcC9g6m_6Sld9Q4jzqdqHd2HiD

modal - a popout mini-window that forbids interaction with the rest of the page until the window is
interacted with

Examples of Modal's :
  alert(msg)
  result = prompt(title, [default])
    presents the user with an input field and an OK/Cancel button
    [default] is the initial value for the input field
  result = confirm(question)

unary + operator converts a value to a number
  +"6" -> 6
  +true -> 1
  shorthand for Number()

++counter vs conuter++
only matters if counter is being used
for example: x = ++counter; and x = counter++; are different

A strict equality operator === checks the equality without type conversion

under comparison, null -> 0 and undefined -> NaN

It is recommended to only use the x ? y : z syntax for variable assingment and not
as a replacement for if statements changing program logic

A chain of || can be used similar to a fall back list.. first truth or last false is returned

&& can be used in replacement of if because the action in the right part of && would execute only
if the evaluation reaches it. That is, only if the condition is true.

!! can be used to convert a value to a Boolean

The result of a ?? b is:

    if a is defined, then a,
    if a isn’t defined, then b.

In other words, ?? returns the first argument if it’s not null/undefined. Otherwise, the second one.

The nullish coalescing operator isn’t "new", It’s shorthand for getting the first “defined” value of the two.

Difference between OR and ??
    || returns the first truthy value.
    ?? returns the first defined value.

A label is an identifier with a colon before a loop:

labelName: for (...) {
  ...
  break labelName;
}

An empty return is also the same as return undefined:

null is used to assign an “empty” or “unknown” value to a variable
undefined is reserved as a default initial value for unassigned things

#######
# DOM #
#######

element.querySelector(selector) returns a reference to the first match of selector
element.querySelectorAll(selectors) returns a “nodelist” of references to all matches of the selectors

If you need to go from nodelist to array... use Array.from()

const div = document.createElement('div');
Creates the new element in memory

Append Elements
    parentNode.appendChild(childNode) appends childNode as the last child of parentNode
    parentNode.insertBefore(newNode, referenceNode) inserts newNode into parentNode before referenceNode

Remove Elements
    parentNode.removeChild(child) removes child from parentNode on the DOM and returns a reference to child

  
Adding Inline Style

    div.style.color = 'blue'; - adds the indicated style rule

    div.style.cssText = 'color: blue; background: white;'; - adds several style rules

    div.setAttribute('style', 'color: blue; background: white;'); - adds several style rules

Editing Attributes

    div.setAttribute('id', 'theDiv'); - if id exists, update it to 'theDiv', else create the id

    div.getAttribute('id'); - returns value of specified attribute

    div.removeAttribute('id'); - removes specified attribute

Working with Classes

    div.classList.add('new'); - adds class "new" to your new div

    div.classList.remove('new'); - removes "new" class from div

    div.classList.toggle('active'); - if div doesn't have class "active" then add it, or if it does, then remove it

Events

    <button onclick="alert('Hello World')">Click Me</button>

    const btn = document.querySelector('#btn');
    btn.addEventListener('click', () => {
      alert("Hello World");
    });

    btn.addEventListener('click', function (e) {
      console.log(e);
    });