/////////////////////
// Chaining Selectors
/////////////////////

<div>
  <div class="subsection header">Latest Posts</div>
  <p class="subsection" id="preview">This is where a preview for a post might go.</p>
</div>

.subsection.header { ... }
.subsection#preview { ... }

/////////////////
// CSS Box Model
/////////////////

padding - increases the space between the edge of a box and the content inside of it.
margin - increases the space between a box and any others that sit next to it.
border - adds space (even if itâ€™s only a pixel or two) between the margin and the padding.

If a box has an outer display type of block, then:

    The box will break onto a new line.
    The width and height properties are respected.
    Padding, margin and border will cause other elements to be pushed away from the box.
    The box will extend in the inline direction to fill the space available in its container. In most cases, the box will become as wide as its container, filling up 100% of the space available.

If a box has an outer display type of inline, then:

    The box will not break onto a new line.
    The width and height properties will not apply.
    Vertical padding, margins, and borders will apply but will not cause other inline boxes to move away from the box.
    Horizontal padding, margins, and borders will apply and will cause other inline boxes to move away from the box.


https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model
https://css-tricks.com/almanac/properties/m/margin/

/////////////////
// CSS FlexBox
/////////////////

Elements can be both containers and items
'flex:' is shorthand for - flex-grow, flex-shrink, flex-basis
'flex-grow: 1' tells all elements to grow to the same size within the container

flex-shrink only ends up being applied if the size of all flex items is larger than their parent container. 
If 3 divs had a width declaration of 100px, and .flex-container was smaller than 300px, our divs would have to shrink to fit.
'flex-shrink: 1' tells all elements to shrink to the same size within the container
'flex-shrink: 0' will tell an item not to shrink

flex-basis sets the initial size of a flex item - Similar to width:
Using auto as a flex-basis tells the item to check for a width declaration

gap: 1rem - Spacing inbetween flex-items

flex-wrap: wrap; - Allows flex-items to wrap

justify-content: center - Align flex-items on the main axis
to use justify-content on vertical spacing, make sure min-height is set on the parent

align-items: change the content alignment on the cross-axis, 
default is stretch (all items are the same size) 

align-self: change the specifc content alignment on a specific flex-item

when using flex-direction: column, flex-basis now refers to height instead of width

////////////////
// Misc. Notes
////////////////

When using <img>, always assign a height and width.  This reserves a space on the webpage
  and prevents the image from shifting layout once loaded

width: max-content; - Fit the content in the space without text-wrapping
width: min-content; - Fit the content based on the largest text with text-wrapping

Using a height of auto with a width will ensure the image maintains porportions

https://www.w3schools.com/Css/css_font.asp
https://www.w3schools.com/cssref/css_websafe_fonts.asp
https://developer.mozilla.org/en-US/docs/Web/CSS/Reference#index